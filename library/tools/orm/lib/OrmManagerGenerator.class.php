<?php

class OrmManagerGenerator {
	public function __construct(){}
	static function make($table, $basePath, $modelFullClassName, $customManagerFullClassName, $autoGenManagerFullClassName) {
		$basePath = rtrim(str_replace("\\", "/", $basePath), "/") . "/";
		php_Lib::println("");
		php_Lib::println($table . " => " . $customManagerFullClassName);
		$vars = OrmTools::fields2vars(haquery_server_db_HaqDb::$connection->getFields($table));
		$autoGeneratedManager = OrmManagerGenerator::getAutoGeneratedManager($table, $vars, $modelFullClassName, $autoGenManagerFullClassName, null);
		php_io_File::putContent($basePath . str_replace(".", "/", $autoGenManagerFullClassName) . ".hx", "// This is autogenerated file. Do not edit!\x0A\x0A" . $autoGeneratedManager->toString());
		$customManager = OrmManagerGenerator::getCustomManager($table, $vars, $modelFullClassName, $customManagerFullClassName, $autoGenManagerFullClassName);
		$pathToCustomManager = $basePath . str_replace(".", "/", $customManagerFullClassName) . ".hx";
		if(!file_exists($pathToCustomManager)) {
			php_io_File::putContent($pathToCustomManager, $customManager->toString());
		}
	}
	static function getAutoGeneratedManager($table, $vars, $modelFullClassName, $fullClassName, $baseFullClassName) {
		$model = new OrmHaxeClass($fullClassName, $baseFullClassName);
		$model->addImport("php.db.ResultSet");
		$model->addImport("haquery.server.db.HaqDb");
		$model->addMethod("new", new _hx_array(array()), "Void", "", null, null);
		$model->addMethod("newModelFromParams", $vars, $modelFullClassName, "var _obj = new " . $modelFullClassName . "();\x0A" . Lambda::map($vars, array(new _hx_lambda(array(&$baseFullClassName, &$fullClassName, &$model, &$modelFullClassName, &$table, &$vars), "OrmManagerGenerator_0"), 'execute'))->join("\x0A") . "\x0A" . "return _obj;", true, null);
		$model->addMethod("newModelFromRow", new _hx_array(array(OrmTools::createVar("d", "Dynamic", null))), $modelFullClassName, "var _obj = new " . $modelFullClassName . "();\x0A" . Lambda::map($vars, array(new _hx_lambda(array(&$baseFullClassName, &$fullClassName, &$model, &$modelFullClassName, &$table, &$vars), "OrmManagerGenerator_1"), 'execute'))->join("\x0A") . "\x0A" . "return _obj;", true, null);
		$getVars = Lambda::filter($vars, array(new _hx_lambda(array(&$baseFullClassName, &$fullClassName, &$model, &$modelFullClassName, &$table, &$vars), "OrmManagerGenerator_2"), 'execute'));
		if($getVars->length > 0) {
			$model->addMethod("get", $getVars, $modelFullClassName, "return getBySqlOne('SELECT * FROM `" . $table . "`" . OrmManagerGenerator::getWhereSql($getVars) . ");", null, null);
		}
		$createVars = Lambda::filter($vars, array(new _hx_lambda(array(&$baseFullClassName, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars), "OrmManagerGenerator_3"), 'execute'));
		$foreignKeys = haquery_server_db_HaqDb::$connection->getForeignKeys($table);
		$foreignKeyVars = Lambda::filter($vars, array(new _hx_lambda(array(&$baseFullClassName, &$createVars, &$foreignKeys, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars), "OrmManagerGenerator_4"), 'execute'));
		$model->addMethod("create", $createVars, $modelFullClassName, (OrmManagerGenerator_5($baseFullClassName, $createVars, $foreignKeyVars, $foreignKeys, $fullClassName, $getVars, $model, $modelFullClassName, $table, $vars)) . "HaqDb.query('INSERT INTO `" . $table . "`(" . Lambda::map($createVars, array(new _hx_lambda(array(&$baseFullClassName, &$createVars, &$foreignKeyVars, &$foreignKeys, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars), "OrmManagerGenerator_6"), 'execute'))->join(", ") . ") VALUES (' + " . Lambda::map($createVars, array(new _hx_lambda(array(&$baseFullClassName, &$createVars, &$foreignKeyVars, &$foreignKeys, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars), "OrmManagerGenerator_7"), 'execute'))->join(" + ', ' + ") . " + ')');\x0A" . "if (HaqDb.affectedRows() < 1) return null;\x0A" . "return newModelFromParams(" . Lambda::map($vars, array(new _hx_lambda(array(&$baseFullClassName, &$createVars, &$foreignKeyVars, &$foreignKeys, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars), "OrmManagerGenerator_8"), 'execute'))->join(", ") . ");", null, null);
		$deleteVars = Lambda::filter($vars, array(new _hx_lambda(array(&$baseFullClassName, &$createVars, &$foreignKeyVars, &$foreignKeys, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars), "OrmManagerGenerator_9"), 'execute'));
		if($deleteVars->length === 0) {
			$deleteVars = $vars;
		}
		$model->addMethod("delete", $deleteVars, "Void", "HaqDb.query('DELETE FROM `" . $table . "`" . OrmManagerGenerator::getWhereSql($deleteVars) . " + ' LIMIT 1');", null, null);
		$model->addMethod("getAll", new _hx_array(array(OrmTools::createVar("_order", "String", OrmManagerGenerator::getOrderDefVal($vars)))), "Array<" . $modelFullClassName . ">", "return getBySqlMany('SELECT * FROM `" . $table . "`' + (_order != null ? ' ORDER BY ' + _order : ''));", null, null);
		$model->addMethod("getBySqlOne", new _hx_array(array(OrmTools::createVar("sql", "String", null))), $modelFullClassName, "var rows : ResultSet = HaqDb.query(sql + ' LIMIT 1');\x0A" . "if (rows.length == 0) return null;\x0A" . "return newModelFromRow(rows.next());", null, null);
		$model->addMethod("getBySqlMany", new _hx_array(array(OrmTools::createVar("sql", "String", null))), "Array<" . $modelFullClassName . ">", "var rows : ResultSet = HaqDb.query(sql);\x0A" . "var list : Array<" . $modelFullClassName . "> = [];\x0A" . "for (row in rows)\x0A" . "{\x0A" . "\x09list.push(newModelFromRow(row));\x0A" . "}\x0A" . "return list;", null, null);
		$uniques = haquery_server_db_HaqDb::$connection->getUniques($table);
		if(null == $uniques) throw new HException('null iterable');
		$»it = $uniques->keys();
		while($»it->hasNext()) {
			$uniqueName = $»it->next();
			$uniqueFields = $uniques->get($uniqueName);
			$vs = Lambda::filter($vars, array(new _hx_lambda(array(&$baseFullClassName, &$createVars, &$deleteVars, &$foreignKeyVars, &$foreignKeys, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$uniqueFields, &$uniqueName, &$uniques, &$vars), "OrmManagerGenerator_10"), 'execute'));
			OrmManagerGenerator::createGetByMethodOne($table, $vars, $modelFullClassName, $vs, $model);
			unset($vs,$uniqueFields);
		}
		if(null == OrmManagerGenerator::getForeignKeyVars($table, $vars)) throw new HException('null iterable');
		$»it = OrmManagerGenerator::getForeignKeyVars($table, $vars)->iterator();
		while($»it->hasNext()) {
			$v = $»it->next();
			OrmManagerGenerator::createGetByMethodMany($table, $vars, $modelFullClassName, new _hx_array(array($v)), $model);
		}
		return $model;
	}
	static function getCustomManager($table, $vars, $modelFullClassName, $fullClassName, $baseFullClassName) {
		$model = new OrmHaxeClass($fullClassName, $baseFullClassName);
		$clas = OrmTools::splitFullClassName($fullClassName);
		$model->addImport("haquery.server.db.HaqDb");
		$model->addImport($modelFullClassName);
		return $model;
	}
	static function createGetByMethodOne($table, $vars, $modelFullClassName, $whereVars, $model) {
		if($whereVars === null || $whereVars->length === 0) {
			return;
		}
		$model->addMethod("getBy" . Lambda::map($whereVars, array(new _hx_lambda(array(&$model, &$modelFullClassName, &$table, &$vars, &$whereVars), "OrmManagerGenerator_11"), 'execute'))->join("And"), $whereVars, $modelFullClassName, "return getBySqlOne('SELECT * FROM `" . $table . "`" . OrmManagerGenerator::getWhereSql($whereVars) . ");", null, null);
	}
	static function createGetByMethodMany($table, $vars, $modelFullClassName, $whereVars, $model) {
		if($whereVars === null || !$whereVars->iterator()->hasNext()) {
			return;
		}
		$model->addMethod("getBy" . Lambda::map($whereVars, array(new _hx_lambda(array(&$model, &$modelFullClassName, &$table, &$vars, &$whereVars), "OrmManagerGenerator_12"), 'execute'))->join("And"), Lambda::concat($whereVars, new _hx_array(array(OrmTools::createVar("_order", "String", OrmManagerGenerator::getOrderDefVal($vars))))), "Array<" . $modelFullClassName . ">", "return getBySqlMany('SELECT * FROM `" . $table . "`" . OrmManagerGenerator::getWhereSql($whereVars) . " + (_order != null ? ' ORDER BY ' + _order : ''));", null, null);
	}
	static function getOrderDefVal($vars) {
		$positionVar = Lambda::filter($vars, array(new _hx_lambda(array(&$vars), "OrmManagerGenerator_13"), 'execute'));
		return OrmManagerGenerator_14($positionVar, $vars);
	}
	static function getWhereSql($vars) {
		return OrmManagerGenerator_15($vars);
	}
	static function getForeignKeyVars($table, $vars) {
		$foreignKeys = haquery_server_db_HaqDb::$connection->getForeignKeys($table);
		$foreignKeyVars = Lambda::filter($vars, array(new _hx_lambda(array(&$foreignKeys, &$table, &$vars), "OrmManagerGenerator_16"), 'execute'));
		return $foreignKeyVars;
	}
	function __toString() { return 'OrmManagerGenerator'; }
}
function OrmManagerGenerator_0(&$baseFullClassName, &$fullClassName, &$model, &$modelFullClassName, &$table, &$vars, $v) {
	{
		return "_obj." . $v->haxeName . " = " . $v->haxeName . ";";
	}
}
function OrmManagerGenerator_1(&$baseFullClassName, &$fullClassName, &$model, &$modelFullClassName, &$table, &$vars, $v) {
	{
		return "_obj." . $v->haxeName . " = Reflect.field(d, '" . $v->haxeName . "');";
	}
}
function OrmManagerGenerator_2(&$baseFullClassName, &$fullClassName, &$model, &$modelFullClassName, &$table, &$vars, $v) {
	{
		return $v->isKey;
	}
}
function OrmManagerGenerator_3(&$baseFullClassName, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars, $v) {
	{
		return !$v->isAutoInc;
	}
}
function OrmManagerGenerator_4(&$baseFullClassName, &$createVars, &$foreignKeys, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars, $v) {
	{
		return !$v->isAutoInc;
	}
}
function OrmManagerGenerator_5(&$baseFullClassName, &$createVars, &$foreignKeyVars, &$foreignKeys, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars) {
	if(Lambda::exists($createVars, array(new _hx_lambda(array(&$baseFullClassName, &$createVars, &$foreignKeyVars, &$foreignKeys, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars), "OrmManagerGenerator_17"), 'execute'))) {
		return "if (position == null)\x0A" . "{\x0A" . "\x09position = HaqDb.query('SELECT MAX(`position`) FROM `" . $table . "`" . OrmManagerGenerator::getWhereSql(OrmManagerGenerator::getForeignKeyVars($table, $vars)) . ").getIntResult(0) + 1;\x0A" . "}\x0A\x0A";
	} else {
		return "";
	}
}
function OrmManagerGenerator_6(&$baseFullClassName, &$createVars, &$foreignKeyVars, &$foreignKeys, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars, $v) {
	{
		return "`" . $v->name . "`";
	}
}
function OrmManagerGenerator_7(&$baseFullClassName, &$createVars, &$foreignKeyVars, &$foreignKeys, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars, $v) {
	{
		return "HaqDb.quote(" . $v->haxeName . ")";
	}
}
function OrmManagerGenerator_8(&$baseFullClassName, &$createVars, &$foreignKeyVars, &$foreignKeys, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars, $v) {
	{
		return OrmManagerGenerator_18($baseFullClassName, $createVars, $foreignKeyVars, $foreignKeys, $fullClassName, $getVars, $model, $modelFullClassName, $table, $v, $vars);
	}
}
function OrmManagerGenerator_9(&$baseFullClassName, &$createVars, &$foreignKeyVars, &$foreignKeys, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars, $v) {
	{
		return $v->isKey;
	}
}
function OrmManagerGenerator_10(&$baseFullClassName, &$createVars, &$deleteVars, &$foreignKeyVars, &$foreignKeys, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$uniqueFields, &$uniqueName, &$uniques, &$vars, $v) {
	{
		return Lambda::has($uniqueFields, $v->name, null);
	}
}
function OrmManagerGenerator_11(&$model, &$modelFullClassName, &$table, &$vars, &$whereVars, $v) {
	{
		return OrmTools::capitalize($v->haxeName);
	}
}
function OrmManagerGenerator_12(&$model, &$modelFullClassName, &$table, &$vars, &$whereVars, $v) {
	{
		return OrmTools::capitalize($v->haxeName);
	}
}
function OrmManagerGenerator_13(&$vars, $v) {
	{
		return $v->name === "position";
	}
}
function OrmManagerGenerator_14(&$positionVar, &$vars) {
	if($positionVar->isEmpty()) {
		return "null";
	} else {
		return "'" . $positionVar->first()->haxeName . "'";
	}
}
function OrmManagerGenerator_15(&$vars) {
	if($vars->iterator()->hasNext()) {
		return " WHERE " . Lambda::map($vars, array(new _hx_lambda(array(&$vars), "OrmManagerGenerator_19"), 'execute'))->join("+' AND ");
	} else {
		return "'";
	}
}
function OrmManagerGenerator_16(&$foreignKeys, &$table, &$vars, $v) {
	{
		return Lambda::exists($foreignKeys, array(new _hx_lambda(array(&$foreignKeys, &$table, &$v, &$vars), "OrmManagerGenerator_20"), 'execute'));
	}
}
function OrmManagerGenerator_17(&$baseFullClassName, &$createVars, &$foreignKeyVars, &$foreignKeys, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars, $v) {
	{
		return $v->name === "position";
	}
}
function OrmManagerGenerator_18(&$baseFullClassName, &$createVars, &$foreignKeyVars, &$foreignKeys, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$v, &$vars) {
	if($v->isAutoInc) {
		return "HaqDb.lastInsertId()";
	} else {
		return $v->haxeName;
	}
}
function OrmManagerGenerator_19(&$vars, $v) {
	{
		return "`" . $v->name . "` = ' + HaqDb.quote(" . $v->haxeName . ")";
	}
}
function OrmManagerGenerator_20(&$foreignKeys, &$table, &$v, &$vars, $fk) {
	{
		return $fk->key === $v->name;
	}
}
