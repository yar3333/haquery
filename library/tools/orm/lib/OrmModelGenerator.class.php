<?php

class OrmModelGenerator {
	public function __construct(){}
	static function make($table, $basePath, $customModelFullClassName, $autoGenModelFullClassName, $customManagerFullClassName) {
		$basePath = rtrim(str_replace("\\", "/", $basePath), "/") . "/";
		php_Lib::println("");
		php_Lib::println($table . " => " . $customModelFullClassName);
		$vars = OrmTools::fields2vars(haquery_server_db_HaqDb::$connection->getFields($table));
		$autoGeneratedModel = OrmModelGenerator::getAutoGeneratedModel($table, $vars, $autoGenModelFullClassName, null);
		php_io_File::putContent($basePath . str_replace(".", "/", $autoGenModelFullClassName) . ".hx", "// This is autogenerated file. Do not edit!\x0A\x0A" . $autoGeneratedModel->toString());
		$customModel = OrmModelGenerator::getCustomModel($table, $vars, $customModelFullClassName, $autoGenModelFullClassName, $customManagerFullClassName);
		$pathToCustomModel = $basePath . str_replace(".", "/", $customModelFullClassName) . ".hx";
		if(!file_exists($pathToCustomModel)) {
			php_io_File::putContent($pathToCustomModel, $customModel->toString());
		}
	}
	static function getAutoGeneratedModel($table, $vars, $fullClassName, $baseFullClassName) {
		$model = new OrmHaxeClass($fullClassName, $baseFullClassName);
		$model->addImport("haquery.server.db.HaqDb");
		if(null == $vars) throw new HException('null iterable');
		$»it = $vars->iterator();
		while($»it->hasNext()) {
			$v = $»it->next();
			$model->addVar($v, null, null);
		}
		$model->addMethod("new", new _hx_array(array()), "Void", "", null, null);
		if(Lambda::exists($vars, array(new _hx_lambda(array(&$baseFullClassName, &$fullClassName, &$model, &$table, &$vars), "OrmModelGenerator_0"), 'execute')) && Lambda::exists($vars, array(new _hx_lambda(array(&$baseFullClassName, &$fullClassName, &$model, &$table, &$vars), "OrmModelGenerator_1"), 'execute'))) {
			$settedVars = Lambda::filter($vars, array(new _hx_lambda(array(&$baseFullClassName, &$fullClassName, &$model, &$table, &$vars), "OrmModelGenerator_2"), 'execute'));
			if($settedVars->length > 0) {
				$model->addMethod("set", $settedVars, "Void", Lambda::map($settedVars, array(new _hx_lambda(array(&$baseFullClassName, &$fullClassName, &$model, &$settedVars, &$table, &$vars), "OrmModelGenerator_3"), 'execute'))->join("\x0A"), null, null);
			}
			$savedVars = Lambda::filter($vars, array(new _hx_lambda(array(&$baseFullClassName, &$fullClassName, &$model, &$settedVars, &$table, &$vars), "OrmModelGenerator_4"), 'execute'));
			$whereVars = Lambda::filter($vars, array(new _hx_lambda(array(&$baseFullClassName, &$fullClassName, &$model, &$savedVars, &$settedVars, &$table, &$vars), "OrmModelGenerator_5"), 'execute'));
			$model->addMethod("save", new HList(), "Void", "HaqDb.query(\x0A" . "\x09 'UPDATE `" . $table . "` SET '\x0A" . "\x09\x09+  '" . Lambda::map($savedVars, array(new _hx_lambda(array(&$baseFullClassName, &$fullClassName, &$model, &$savedVars, &$settedVars, &$table, &$vars, &$whereVars), "OrmModelGenerator_6"), 'execute'))->join("\x0A\x09\x09+', ") . "\x0A\x09+' WHERE " . Lambda::map($whereVars, array(new _hx_lambda(array(&$baseFullClassName, &$fullClassName, &$model, &$savedVars, &$settedVars, &$table, &$vars, &$whereVars), "OrmModelGenerator_7"), 'execute'))->join("+' AND ") . "\x0A\x09+' LIMIT 1'" . "\x0A);", null, null);
		}
		return $model;
	}
	static function getCustomModel($table, $vars, $fullClassName, $baseFullClassName, $customManagerFullClassName) {
		$model = new OrmHaxeClass($fullClassName, $baseFullClassName);
		$clas = OrmTools::splitFullClassName($fullClassName);
		$model->addImport("haquery.server.db.HaqDb");
		$model->addImport($customManagerFullClassName);
		$model->addVar(OrmTools::createVar("manager", $customManagerFullClassName, "new " . $customManagerFullClassName . "()"), false, true);
		return $model;
	}
	function __toString() { return 'OrmModelGenerator'; }
}
function OrmModelGenerator_0(&$baseFullClassName, &$fullClassName, &$model, &$table, &$vars, $v) {
	{
		return $v->isKey;
	}
}
function OrmModelGenerator_1(&$baseFullClassName, &$fullClassName, &$model, &$table, &$vars, $v) {
	{
		return !$v->isKey;
	}
}
function OrmModelGenerator_2(&$baseFullClassName, &$fullClassName, &$model, &$table, &$vars, $v) {
	{
		return !$v->isKey && !$v->isAutoInc;
	}
}
function OrmModelGenerator_3(&$baseFullClassName, &$fullClassName, &$model, &$settedVars, &$table, &$vars, $v) {
	{
		return "this." . $v->haxeName . " = " . $v->haxeName . ";";
	}
}
function OrmModelGenerator_4(&$baseFullClassName, &$fullClassName, &$model, &$settedVars, &$table, &$vars, $v) {
	{
		return !$v->isKey;
	}
}
function OrmModelGenerator_5(&$baseFullClassName, &$fullClassName, &$model, &$savedVars, &$settedVars, &$table, &$vars, $v) {
	{
		return $v->isKey;
	}
}
function OrmModelGenerator_6(&$baseFullClassName, &$fullClassName, &$model, &$savedVars, &$settedVars, &$table, &$vars, &$whereVars, $v) {
	{
		return "`" . $v->name . "` = ' + HaqDb.quote(" . $v->haxeName . ")";
	}
}
function OrmModelGenerator_7(&$baseFullClassName, &$fullClassName, &$model, &$savedVars, &$settedVars, &$table, &$vars, &$whereVars, $v) {
	{
		return "`" . $v->name . "` = ' + HaqDb.quote(" . $v->haxeName . ")";
	}
}
