<?php
require_once dirname(__FILE__).'/HaqXml.extern.php';

class TrmGenerator {
	public function __construct(){}
	static $MIN_DATE;
	static $isFirstPrint = true;
	static function makeForComponents($componentsPackage) {
		$GLOBALS['%s']->push("TrmGenerator::makeForComponents");
		$製pos = $GLOBALS['%s']->length;
		$_g = 0; $_g1 = TrmTools::getClassPaths();
		while($_g < $_g1->length) {
			$classPath = $_g1[$_g];
			++$_g;
			$basePath = rtrim(str_replace("\\", "/", $classPath), "/") . "/";
			$path = $basePath . str_replace(".", "/", $componentsPackage);
			if(is_dir($path)) {
				TrmGenerator::makeForComponentsFolder($componentsPackage);
			}
			unset($path,$classPath,$basePath);
		}
		$GLOBALS['%s']->pop();
	}
	static function makeForComponentsFolder($componentsPackage) {
		$GLOBALS['%s']->push("TrmGenerator::makeForComponentsFolder");
		$製pos = $GLOBALS['%s']->length;
		$path = TrmGenerator::findFile(str_replace(".", "/", $componentsPackage));
		{
			$_g = 0; $_g1 = php_FileSystem::readDirectory($path);
			while($_g < $_g1->length) {
				$componentName = $_g1[$_g];
				++$_g;
				if(is_dir($path . "/" . $componentName)) {
					TrmGenerator::makeForComponent($componentsPackage, $componentName);
				}
				unset($componentName);
			}
		}
		$GLOBALS['%s']->pop();
	}
	static function makeForComponent($componentsPackage, $componentName) {
		$GLOBALS['%s']->push("TrmGenerator::makeForComponent");
		$製pos = $GLOBALS['%s']->length;
		$destFilePath = TrmGenerator::findFile(str_replace(".", "/", $componentsPackage) . "/" . $componentName) . "/Template.hx";
		$componentData = TrmGenerator::getComponentData($componentsPackage, $componentName);
		if(TrmGenerator::findFile(str_replace(".", "/", $componentsPackage) . "/" . $componentName . "/Server.hx") !== null || TrmGenerator::findFile(str_replace(".", "/", $componentsPackage) . "/" . $componentName . "/Client.hx") !== null) {
			if(!file_exists($destFilePath) || php_FileSystem::stat($destFilePath)->mtime->getTime() < $componentData->lastMod->getTime()) {
				$haxeClass = new TrmHaxeClass($componentsPackage . "." . $componentName . ".Template", $componentData->superClass);
				$haxeClass->addVar(TrmTools::createVar("component", "#if php haquery.server.HaqComponent #else haquery.client.HaqComponent #end", null), true, null);
				$doc = new HaqXml($componentData->templateText);
				$templateVars = TrmGenerator::getTemplateVars($componentsPackage, $doc);
				if($templateVars->length > 0) {
					if(TrmGenerator::$isFirstPrint) {
						php_Lib::hprint("\x0A  ");
						TrmGenerator::$isFirstPrint = false;
					}
					php_Lib::hprint($componentsPackage . "." . $componentName . "\x0A  ");
					{
						$_g = 0;
						while($_g < $templateVars->length) {
							$templateVar = $templateVars[$_g];
							++$_g;
							$haxeClass->addVarGetter($templateVar, false, false, true);
							unset($templateVar);
						}
					}
					$haxeClass->addMethod("new", new _hx_array(array(TrmTools::createVar("component", "#if php haquery.server.HaqComponent #else haquery.client.HaqComponent #end", null))), "Void", "this.component = component;", null, null);
					php_io_File::putContent($destFilePath, "// This is autogenerated file. Do not edit!\x0A\x0A" . $haxeClass->toString());
				} else {
					if(file_exists($destFilePath)) {
						@unlink($destFilePath);
					}
				}
			}
		}
		$GLOBALS['%s']->pop();
	}
	static function findFile($relativePath) {
		$GLOBALS['%s']->push("TrmGenerator::findFile");
		$製pos = $GLOBALS['%s']->length;
		$classPaths = TrmTools::getClassPaths();
		$i = $classPaths->length - 1;
		while($i >= 0) {
			if(file_exists($classPaths[$i] . $relativePath)) {
				$裨mp = $classPaths[$i] . $relativePath;
				$GLOBALS['%s']->pop();
				return $裨mp;
				unset($裨mp);
			}
			$i--;
		}
		{
			$GLOBALS['%s']->pop();
			return null;
		}
		$GLOBALS['%s']->pop();
	}
	static function getComponentData($componentsPackage, $componentName) {
		$GLOBALS['%s']->push("TrmGenerator::getComponentData");
		$製pos = $GLOBALS['%s']->length;
		$templateSuperClassPath = TrmGenerator::findFile(str_replace(".", "/", $componentsPackage) . $componentName . "/Template.hx");
		if($templateSuperClassPath !== null) {
			$裨mp = _hx_anonymous(array("templateText" => "", "superClass" => $componentsPackage . "." . $componentName, "lastMod" => new Date(2000, 0, 0, 0, 0, 0)));
			$GLOBALS['%s']->pop();
			return $裨mp;
		}
		$templatePath = TrmGenerator::findFile(str_replace(".", "/", $componentsPackage) . "/" . $componentName . "/template.html");
		$templateText = (($templatePath !== null) ? php_io_File::getContent($templatePath) : "");
		$lastMod = TrmGenerator_0($componentName, $componentsPackage, $templatePath, $templateSuperClassPath, $templateText);
		$config = haquery_server_HaqConfig::getComponentsConfig(TrmTools::getClassPaths(), $componentsPackage);
		if($config->extendsPackage !== null && $config->extendsPackage !== "") {
			$superTemplateData = TrmGenerator::getComponentData($config->extendsPackage, $componentName);
			{
				$裨mp = _hx_anonymous(array("templateText" => $superTemplateData->templateText . $templateText, "superClass" => $superTemplateData->superClass, "lastMod" => TrmGenerator_1($componentName, $componentsPackage, $config, $lastMod, $superTemplateData, $templatePath, $templateSuperClassPath, $templateText)));
				$GLOBALS['%s']->pop();
				return $裨mp;
			}
		}
		{
			$裨mp = _hx_anonymous(array("templateText" => $templateText, "superClass" => null, "lastMod" => new Date(2000, 0, 0, 0, 0, 0)));
			$GLOBALS['%s']->pop();
			return $裨mp;
		}
		$GLOBALS['%s']->pop();
	}
	static function getTemplateVars($componentsPackage, $node) {
		$GLOBALS['%s']->push("TrmGenerator::getTemplateVars");
		$製pos = $GLOBALS['%s']->length;
		$r = new _hx_array(array());
		$children = new _hx_array($node->children);
		{
			$_g = 0;
			while($_g < $children->length) {
				$child = $children[$_g];
				++$_g;
				if($child->hasAttribute("id") && trim($child->getAttribute("id"), null) !== "") {
					$componentID = trim($child->getAttribute("id"), null);
					$type = "#if php haquery.server.HaqQuery #else haquery.client.HaqQuery #end";
					$body = "return component.q('#" . $componentID . "');";
					if(StringTools::startsWith($child->name, "haq:")) {
						$componentName = _hx_substr($child->name, strlen("haq:"), null);
						$serverClass = TrmGenerator::getComponentClass($componentsPackage, $componentName, "Server");
						if($serverClass === null) {
							$serverClass = "haquery.server.HaqComponent";
						}
						$clientClass = TrmGenerator::getComponentClass($componentsPackage, $componentName, "Client");
						if($clientClass === null) {
							$clientClass = "haquery.client.HaqComponent";
						}
						$type = "#if php " . $serverClass . " #else " . $clientClass . " #end";
						$body = "return cast component.components.get('" . $componentID . "');";
						unset($serverClass,$componentName,$clientClass);
					}
					$r->push(_hx_anonymous(array("name" => $componentID, "type" => $type, "body" => $body)));
					unset($type,$componentID,$body);
				}
				$r = $r->concat(TrmGenerator::getTemplateVars($componentsPackage, $child));
				unset($child);
			}
		}
		{
			$GLOBALS['%s']->pop();
			return $r;
		}
		$GLOBALS['%s']->pop();
	}
	static function getComponentClass($componentsPackage, $componentName, $className) {
		$GLOBALS['%s']->push("TrmGenerator::getComponentClass");
		$製pos = $GLOBALS['%s']->length;
		$haxeClass = $componentsPackage . "." . $componentName . "." . $className;
		if(TrmGenerator::findFile(str_replace(".", "/", $haxeClass) . ".hx") !== null) {
			$GLOBALS['%s']->pop();
			return $haxeClass;
		}
		$config = haquery_server_HaqConfig::getComponentsConfig(TrmTools::getClassPaths(), $componentsPackage);
		if($config->extendsPackage !== null && $config->extendsPackage !== "") {
			$裨mp = TrmGenerator::getComponentClass($config->extendsPackage, $componentName, $className);
			$GLOBALS['%s']->pop();
			return $裨mp;
		}
		{
			$GLOBALS['%s']->pop();
			return null;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'TrmGenerator'; }
}
TrmGenerator::$MIN_DATE = new Date(2000, 0, 0, 0, 0, 0);
function TrmGenerator_0(&$componentName, &$componentsPackage, &$templatePath, &$templateSuperClassPath, &$templateText) {
	$製pos = $GLOBALS['%s']->length;
	if($templatePath !== null) {
		return php_FileSystem::stat($templatePath)->mtime;
	} else {
		return new Date(2000, 0, 0, 0, 0, 0);
	}
}
function TrmGenerator_1(&$componentName, &$componentsPackage, &$config, &$lastMod, &$superTemplateData, &$templatePath, &$templateSuperClassPath, &$templateText) {
	$製pos = $GLOBALS['%s']->length;
	if($superTemplateData->lastMod->getTime() > $lastMod->getTime()) {
		return $superTemplateData->lastMod;
	} else {
		return $lastMod;
	}
}
