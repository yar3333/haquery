package php.imageMagick;

@:native("Imagick") extern class Imagick
{
	public function adaptiveBlurImage(radius:Float, sigma:Float, ?channel:Int = Imagick.CHANNEL_DEFAULT) : Bool;
	public function adaptiveResizeImage(columns:Int, rows:Int, ?bestfit:Bool = false) : Bool;
	public function adaptiveSharpenImage(radius:Float, sigma:Float, ?channel:Int = Imagick.CHANNEL_DEFAULT) : Bool;
	public function adaptiveThresholdImage(width:Int, height:Int, offset:Int) : Bool;
	public function addImage(source:Imagick) : Bool;
	public function addNoiseImage(noise_type:Int, ?channel:Int = Imagick.CHANNEL_DEFAULT) : Bool;
	public function affineTransformImage(matrix:ImagickDraw) : Bool;
	public function animateImages(x_server:String) : Bool;
	public function annotateImage(draw_settings:ImagickDraw, x:Float, y:Float, angle:Float, text:String) : Bool;
	public function appendImages(stack:Bool) : Imagick;
	public function averageImages() : Imagick;
	public function blackThresholdImage(threshold:Dynamic) : Bool;
	public function blurImage(radius:Float, sigma:Float, ?channel:Int) : Bool;
	public function borderImage(bordercolor:Dynamic, width:Int, height:Int) : Bool;
	public function charcoalImage(radius:Float, sigma:Float) : Bool;
	public function chopImage(width:Int, height:Int, x:Int, y:Int) : Bool;
	public function clear() : Bool;
	public function clipImage() : Bool;
	public function clipPathImage(pathname:String, inside:Bool) : Bool;
	public function clone() : Imagick;
	public function clutImage(lookup_table:Imagick, ?channel:Float = Imagick.CHANNEL_DEFAULT) : Bool;
	public function coalesceImages() : Imagick;
	public function colorFloodfillImage(fill:Dynamic, fuzz:Float, bordercolor:Dynamic, x:Int, y:Int) : Bool;
	public function colorizeImage(colorize:Dynamic, opacity:Dynamic) : Bool;
	public function combineImages(channelType:Int) : Imagick;
	public function commentImage(comment:String) : Bool;
	public function compareImageChannels(image:Imagick, channelType:Int, metricType:Int) : NativeArray;
	public function compareImageLayers(method:Int) : Imagick;
	public function compareImages(compare:Imagick, metric:Int) : NativeArray;
	public function compositeImage(composite_object:Imagick, composite:Int, x:Int, y:Int, ?channel:Int = Imagick.CHANNEL_ALL) : Bool;
	public function new(?files:Dynamic) : Void;
	public function contrastImage(sharpen:Bool) : Bool;
	public function contrastStretchImage(black_point:Float, white_point:Float, ?channel:Int = Imagick.CHANNEL_ALL) : Bool;
	public function convolveImage(kernel:NativeArray, ?channel:Int = Imagick.CHANNEL_ALL) : Bool;
	public function cropImage(width:Int, height:Int, x:Int, y:Int) : Bool;
	public function cropThumbnailImage(width:Int, height:Int) : Bool;
	public function current() : Imagick;
	public function cycleColormapImage(displace:Int) : Bool;
	public function decipherImage(passphrase:String) : Bool;
	public function deconstructImages() : Imagick;
	public function deleteImageArtifact(artifact:String) : Bool;
	public function deskewImage(threshold:Float) : Bool;
	public function despeckleImage() : Bool;
	public function destroy() : Bool;
	public function displayImage(servername:String) : Bool;
	public function displayImages(servername:String) : Bool;
	public function distortImage(method:Int, arguments:NativeArray, bestfit:Bool) : Bool;
	public function drawImage(draw:ImagickDraw) : Bool;
	public function edgeImage(radius:Float) : Bool;
	public function embossImage(radius:Float, sigma:Float) : Bool;
	public function encipherImage(passphrase:String) : Bool;
	public function enhanceImage() : Bool;
	public function equalizeImage() : Bool;
	public function evaluateImage(op:Int, constant:Float, ?channel:Int = Imagick.CHANNEL_ALL) : Bool;
	public function exportImagePixels(x:Int, y:Int, width:Int, height:Int, map:String, STORAGE:Int) : NativeArray;
	public function extentImage(width:Int, height:Int, x:Int, y:Int) : Bool;
	public function flattenImages() : Imagick;
	public function flipImage() : Bool;
	public function floodFillPaintImage(fill:Dynamic, fuzz:Float, target:Dynamic, x:Int, y:Int, invert:Bool, ?channel:Int = Imagick.CHANNEL_DEFAULT) : Bool;
	public function flopImage() : Bool;
	public function frameImage(matte_color:Dynamic, width:Int, height:Int, inner_bevel:Int, outer_bevel:Int) : Bool;
	public function functionImage(function:Int, arguments:NativeArray, ?channel:Int = Imagick.CHANNEL_DEFAULT) : Bool;
	public function fxImage(expression:String, ?channel:Int = Imagick.CHANNEL_ALL) : Imagick;
	public function gammaImage(gamma:Float, ?channel:Int = Imagick.CHANNEL_ALL) : Bool;
	public function gaussianBlurImage(radius:Float, sigma:Float, ?channel:Int = Imagick.CHANNEL_ALL) : Bool;
	public function getColorspace() : Int;
	public function getCompression() : Int;
	public function getCompressionQuality() : Int;
	public function getCopyright() : String;
	public function getFilename() : String;
	public function getFont() : String;
	public function getFormat() : String;
	public function getGravity() : Int;
	public function getHomeURL() : String;
	public function getImage() : Imagick;
	public function getImageAlphaChannel() : Int;
	public function getImageArtifact(artifact:String) : String;
	public function getImageBackgroundColor() : ImagickPixel;
	public function getImageBlob() : String;
	public function getImageBluePrimary() : NativeArray;
	public function getImageBorderColor() : ImagickPixel;
	public function getImageChannelDepth(channel:Int) : Int;
	public function getImageChannelDistortion(reference:Imagick, channel:Int, metric:Int) : Float;
	public function getImageChannelDistortions(reference:Imagick, metric:Int, ?channel:Int = Imagick.CHANNEL_DEFAULT) : Float;
	public function getImageChannelExtrema(channel:Int) : NativeArray;
	public function getImageChannelKurtosis(?channel:Int = Imagick.CHANNEL_DEFAULT) : NativeArray;
	public function getImageChannelMean(channel:Int) : NativeArray;
	public function getImageChannelRange(channel:Int) : NativeArray;
	public function getImageChannelStatistics() : NativeArray;
	public function getImageClipMask() : Imagick;
	public function getImageColormapColor(index:Int) : ImagickPixel;
	public function getImageColors() : Int;
	public function getImageColorspace() : Int;
	public function getImageCompose() : Int;
	public function getImageCompression() : Int;
	public function getCompressionQuality() : Int;
	public function getImageDelay() : Int;
	public function getImageDepth() : Int;
	public function getImageDispose() : Int;
	public function getImageDistortion(reference:MagickWand, metric:Int) : Float;
	public function getImageExtrema() : NativeArray;
	public function getImageFilename() : String;
	public function getImageFormat() : String;
	public function getImageGamma() : Float;
	public function getImageGeometry() : NativeArray;
	public function getImageGravity() : Int;
	public function getImageGreenPrimary() : NativeArray;
	public function getImageHeight() : Int;
	public function getImageHistogram() : NativeArray;
	public function getImageIndex() : Int;
	public function getImageInterlaceScheme() : Int;
	public function getImageInterpolateMethod() : Int;
	public function getImageIterations() : Int;
	public function getImageLength() : Int;
	public function getImageMagickLicense() : String;
	public function getImageMatte() : Bool;
	public function getImageMatteColor() : ImagickPixel;
	public function getImageOrientation() : Int;
	public function getImagePage() : NativeArray;
	public function getImagePixelColor(x:Int, y:Int) : ImagickPixel;
	public function getImageProfile(name:String) : String;
	public function getImageProfiles(?pattern:String = "*", ?only_names:Bool = true) : NativeArray;
	public function getImageProperties(?pattern:String = "*", ?only_names:Bool = true) : NativeArray;
	public function getImageProperty(name:String) : String;
	public function getImageRedPrimary() : NativeArray;
	public function getImageRegion(width:Int, height:Int, x:Int, y:Int) : Imagick;
	public function getImageRenderingIntent() : Int;
	public function getImageResolution() : NativeArray;
	public function getImagesBlob() : String;
	public function getImageScene() : Int;
	public function getImageSignature() : String;
	public function getImageSize() : Int;
	public function getImageTicksPerSecond() : Int;
	public function getImageTotalInkDensity() : Float;
	public function getImageType() : Int;
	public function getImageUnits() : Int;
	public function getImageVirtualPixelMethod() : Int;
	public function getImageWhitePoint() : NativeArray;
	public function getImageWidth() : Int;
	public function getInterlaceScheme() : Int;
	public function getIteratorIndex() : Int;
	public function getNumberImages() : Int;
	public function getOption(key:String) : String;
	public function getPackageName() : String;
	public function getPage() : NativeArray;
	public function getPixelIterator() : ImagickPixelIterator;
	public function getPixelRegionIterator(x:Int, y:Int, columns:Int, rows:Int) : ImagickPixelIterator;
	public function getPointSize() : Float;
	public function getQuantumDepth() : NativeArray;
	public function getQuantumRange() : NativeArray;
	public function getReleaseDate() : String;
	public function getResource(type:Int) : Int;
	public function getResourceLimit(type:Int) : Int;
	public function getSamplingFactors() : NativeArray;
	public function getSize() : NativeArray;
	public function getSizeOffset() : Int;
	public function getVersion() : NativeArray;
	public function haldClutImage(clut:Imagick, ?channel:Int = Imagick.CHANNEL_DEFAULT) : Bool;
	public function hasNextImage() : Bool;
	public function hasPreviousImage() : Bool;
	public function identifyImage(?appendRawOutput:Bool = false) : NativeArray;
	public function implodeImage(radius:Float) : Bool;
	public function importImagePixels(x:Int, y:Int, width:Int, height:Int, map:String, storage:Int, pixels:NativeArray) : Bool;
	public function labelImage(label:String) : Bool;
	public function levelImage(blackPoint:Float, gamma:Float, whitePoint:Float, ?channel:Int = Imagick.CHANNEL_ALL) : Bool;
	public function linearStretchImage(blackPoint:Float, whitePoint:Float) : Bool;
	public function liquidRescaleImage(width:Int, height:Int, delta_x:Float, rigidity:Float) : Bool;
	public function magnifyImage() : Bool;
	public function mapImage(map:Imagick, dither:Bool) : Bool;
	public function matteFloodfillImage(alpha:Float, fuzz:Float, bordercolor:Dynamic, x:Int, y:Int) : Bool;
	public function medianFilterImage(radius:Float) : Bool;
	public function mergeImageLayers(layer_method:Int) : Bool;
	public function minifyImage() : Bool;
	public function modulateImage(brightness:Float, saturation:Float, hue:Float) : Bool;
	public function montageImage(draw:ImagickDraw, tile_geometry:String, thumbnail_geometry:String, mode:Int, frame:String) : Imagick;
	public function morphImages(number_frames:Int) : Imagick;
	public function mosaicImages() : Imagick;
	public function motionBlurImage(radius:Float, sigma:Float, angle:Float, ?channel:Int = Imagick.CHANNEL_DEFAULT) : Bool;
	public function negateImage(gray:Bool, ?channel:Int = Imagick.CHANNEL_ALL) : Bool;
	public function newImage(cols:Int, rows:Int, background:Dynamic, ?format:String) : Bool;
	public function newPseudoImage(columns:Int, rows:Int, pseudoString:String) : Bool;
	public function nextImage() : Bool;
	public function normalizeImage(?channel:Int = Imagick.CHANNEL_ALL) : Bool;
	public function oilPaintImage(radius:Float) : Bool;
	public function opaquePaintImage(target:Dynamic, fill:Dynamic, fuzz:Float, invert:Bool, ?channel:Int = Imagick.CHANNEL_DEFAULT) : Bool;
	public function optimizeImageLayers() : Bool;
	public function orderedPosterizeImage(threshold_map:String, ?channel:Int = Imagick.CHANNEL_ALL) : Bool;
	public function paintFloodfillImage(fill:Dynamic, fuzz:Float, bordercolor:Dynamic, x:Int, y:Int, ?channel:Int = Imagick.CHANNEL_ALL) : Bool;
	public function paintOpaqueImage(target:Dynamic, fill:Dynamic, fuzz:Float, ?channel:Int = Imagick.CHANNEL_ALL) : Bool;
	public function paintTransparentImage(target:Dynamic, alpha:Float, fuzz:Float) : Bool;
	public function pingImage(filename:String) : Bool;
	public function pingImageBlob(image:String) : Bool;
	public function pingImageFile(filehandle:resource, ?fileName:String) : Bool;
	public function polaroidImage(properties:ImagickDraw, angle:Float) : Bool;
	public function posterizeImage(levels:Int, dither:Bool) : Bool;
	public function previewImages(preview:Int) : Bool;
	public function previousImage() : Bool;
	public function profileImage(name:String, profile:String) : Bool;
	public function quantizeImage(numberColors:Int, colorspace:Int, treedepth:Int, dither:Bool, measureError:Bool) : Bool;
	public function quantizeImages(numberColors:Int, colorspace:Int, treedepth:Int, dither:Bool, measureError:Bool) : Bool;
	public function queryFontMetrics(properties:ImagickDraw, text:String, ?multiline:Bool) : NativeArray;
	public function queryFonts(?pattern:String = "*") : NativeArray;
	public function queryFormats(?pattern:String = "*") : NativeArray;
	public function radialBlurImage(angle:Float, ?channel:Int = Imagick.CHANNEL_ALL) : Bool;
	public function raiseImage(width:Int, height:Int, x:Int, y:Int, raise:Bool) : Bool;
	public function randomThresholdImage(low:Float, high:Float, ?channel:Int = Imagick.CHANNEL_ALL) : Bool;
	public function readImage(filename:String) : Bool;
	public function readImageBlob(image:String, ?filename:String) : Bool;
	public function readImageFile(filehandle:resource, ?fileName:String = null) : Bool;
	public function recolorImage(matrix:NativeArray) : Bool;
	public function reduceNoiseImage(radius:Float) : Bool;
	public function remapImage(replacement:Imagick, DITHER:Int) : Bool;
	public function removeImage() : Bool;
	public function removeImageProfile(name:String) : String;
	public function render() : Bool;
	public function resampleImage(x_resolution:Float, y_resolution:Float, filter:Int, blur:Float) : Bool;
	public function resetImagePage(page:String) : Bool;
	public function resizeImage(columns:Int, rows:Int, filter:Int, blur:Float, ?bestfit:Bool = false) : Bool;
	public function rollImage(x:Int, y:Int) : Bool;
	public function rotateImage(background:Dynamic, degrees:Float) : Bool;
	public function roundCorners(x_rounding:Float, y_rounding:Float, ?stroke_width:Float = 10, ?displace:Float = 5, ?size_correction:Float = -6) : Bool;
	public function sampleImage(columns:Int, rows:Int) : Bool;
	public function scaleImage(cols:Int, rows:Int, ?bestfit:Bool = false) : Bool;
	public function segmentImage(COLORSPACE:Int, cluster_threshold:Float, smooth_threshold:Float, ?verbose:Bool = false) : Bool;
	public function separateImageChannel(channel:Int) : Bool;
	public function sepiaToneImage(threshold:Float) : Bool;
	public function setBackgroundColor(background:Dynamic) : Bool;
	public function setColorspace(COLORSPACE:Int) : Bool;
	public function setCompression(compression:Int) : Bool;
	public function setCompressionQuality(quality:Int) : Bool;
	public function setFilename(filename:String) : Bool;
	public function setFirstIterator() : Bool;
	public function setFont(font:String) : Bool;
	public function setFormat(format:String) : Bool;
	public function setGravity(gravity:Int) : Bool;
	public function setImage(replace:Imagick) : Bool;
	public function setImageAlphaChannel(mode:Int) : Bool;
	public function setImageArtifact(artifact:String, value:String) : Bool;
	public function setImageBackgroundColor(background:Dynamic) : Bool;
	public function setImageBias(bias:Float) : Bool;
	public function setImageBluePrimary(x:Float, y:Float) : Bool;
	public function setImageBorderColor(border:Dynamic) : Bool;
	public function setImageChannelDepth(channel:Int, depth:Int) : Bool;
	public function setImageClipMask(clip_mask:Imagick) : Bool;
	public function setImageColormapColor(index:Int, color:ImagickPixel) : Bool;
	public function setImageColorspace(colorspace:Int) : Bool;
	public function setImageCompose(compose:Int) : Bool;
	public function setImageCompression(compression:Int) : Bool;
	public function setImageCompressionQuality(quality:Int) : Bool;
	public function setImageDelay(delay:Int) : Bool;
	public function setImageDepth(depth:Int) : Bool;
	public function setImageDispose(dispose:Int) : Bool;
	public function setImageExtent(columns:Int, rows:Int) : Bool;
	public function setImageFilename(filename:String) : Bool;
	public function setImageFormat(format:String) : Bool;
	public function setImageGamma(gamma:Float) : Bool;
	public function setImageGravity(gravity:Int) : Bool;
	public function setImageGreenPrimary(x:Float, y:Float) : Bool;
	public function setImageIndex(index:Int) : Bool;
	public function setImageInterlaceScheme(interlace_scheme:Int) : Bool;
	public function setImageInterpolateMethod(method:Int) : Bool;
	public function setImageIterations(iterations:Int) : Bool;
	public function setImageMatte(matte:Bool) : Bool;
	public function setImageMatteColor(matte:Dynamic) : Bool;
	public function setImageOpacity(opacity:Float) : Bool;
	public function setImageOrientation(orientation:Int) : Bool;
	public function setImagePage(width:Int, height:Int, x:Int, y:Int) : Bool;
	public function setImageProfile(name:String, profile:String) : Bool;
	public function setImageProperty(name:String, value:String) : Bool;
	public function setImageRedPrimary(x:Float, y:Float) : Bool;
	public function setImageRenderingIntent(rendering_intent:Int) : Bool;
	public function setImageResolution(x_resolution:Float, y_resolution:Float) : Bool;
	public function setImageScene(scene:Int) : Bool;
	public function setImageTicksPerSecond(ticks_per:Int-second) : Bool;
	public function setImageType(image_type:Int) : Bool;
	public function setImageUnits(units:Int) : Bool;
	public function setImageVirtualPixelMethod(method:Int) : Bool;
	public function setImageWhitePoint(x:Float, y:Float) : Bool;
	public function setInterlaceScheme(interlace_scheme:Int) : Bool;
	public function setIteratorIndex(index:Int) : Bool;
	public function setLastIterator() : Bool;
	public function setOption(key:String, value:String) : Bool;
	public function setPage(width:Int, height:Int, x:Int, y:Int) : Bool;
	public function setPointSize(point_size:Float) : Bool;
	public function setResolution(x_resolution:Float, y_resolution:Float) : Bool;
	public function setResourceLimit(type:Int, limit:Int) : Bool;
	public function setSamplingFactors(factors:NativeArray) : Bool;
	public function setSize(columns:Int, rows:Int) : Bool;
	public function setSizeOffset(columns:Int, rows:Int, offset:Int) : Bool;
	public function setType(image_type:Int) : Bool;
	public function shadeImage(gray:Bool, azimuth:Float, elevation:Float) : Bool;
	public function shadowImage(opacity:Float, sigma:Float, x:Int, y:Int) : Bool;
	public function sharpenImage(radius:Float, sigma:Float, ?channel:Int = Imagick.CHANNEL_ALL) : Bool;
	public function shaveImage(columns:Int, rows:Int) : Bool;
	public function shearImage(background:Dynamic, x_shear:Float, y_shear:Float) : Bool;
	public function sigmoidalContrastImage(sharpen:Bool, alpha:Float, beta:Float, ?channel:Int = Imagick.CHANNEL_ALL) : Bool;
	public function sketchImage(radius:Float, sigma:Float, angle:Float) : Bool;
	public function solarizeImage(threshold:Int) : Bool;
	public function sparseColorImage(SPARSE_METHOD:Int, arguments:NativeArray, ?channel:Int = Imagick.CHANNEL_DEFAULT) : Bool;
	public function spliceImage(width:Int, height:Int, x:Int, y:Int) : Bool;
	public function spreadImage(radius:Float) : Bool;
	public function steganoImage(watermark_wand:Imagick, offset:Int) : Imagick;
	public function stereoImage(offset_wand:Imagick) : Bool;
	public function stripImage() : Bool;
	public function swirlImage(degrees:Float) : Bool;
	public function textureImage(texture_wand:Imagick) : Bool;
	public function thresholdImage(threshold:Float, ?channel:Int = Imagick.CHANNEL_ALL) : Bool;
	public function thumbnailImage(columns:Int, rows:Int, ?bestfit:Bool = false, ?fill:Bool = false) : Bool;
	public function tintImage(tint:Dynamic, opacity:Dynamic) : Bool;
	public function transformImage(crop:String, geometry:String) : Imagick;
	public function transparentPaintImage(target:Dynamic, alpha:Float, fuzz:Float, invert:Bool) : Bool;
	public function transposeImage() : Bool;
	public function transverseImage() : Bool;
	public function trimImage(fuzz:Float) : Bool;
	public function uniqueImageColors() : Bool;
	public function unsharpMaskImage(radius:Float, sigma:Float, amount:Float, threshold:Float, ?channel:Int = Imagick.CHANNEL_ALL) : Bool;
	public function valid() : Bool;
	public function vignetteImage(blackPoint:Float, whitePoint:Float, x:Int, y:Int) : Bool;
	public function waveImage(amplitude:Float, length:Float) : Bool;
	public function whiteThresholdImage(threshold:Dynamic) : Bool;
	public function writeImage(?filename:String) : Bool;
	public function writeImageFile(filehandle:resource) : Bool;
	public function writeImages(filename:String, adjoin:Bool) : Bool;
	public function writeImagesFile(filehandle:resource) : Bool;
}