<?php

class OrmManagerGenerator {
	public function __construct(){}
	static function make($table, $basePath, $modelFullClassName, $customManagerFullClassName, $autoGenManagerFullClassName) {
		$GLOBALS['%s']->push("OrmManagerGenerator::make");
		$製pos = $GLOBALS['%s']->length;
		$basePath = rtrim(str_replace("\\", "/", $basePath), "/") . "/";
		php_Lib::println("");
		php_Lib::println($table . " => " . $customManagerFullClassName);
		$vars = OrmTools::fields2vars(haquery_server_db_HaqDb::$connection->getFields($table));
		$autoGeneratedManager = OrmManagerGenerator::getAutoGeneratedManager($table, $vars, $modelFullClassName, $autoGenManagerFullClassName, null);
		php_io_File::putContent($basePath . str_replace(".", "/", $autoGenManagerFullClassName) . ".hx", $autoGeneratedManager->toString());
		$customManager = OrmManagerGenerator::getCustomManager($table, $vars, $modelFullClassName, $customManagerFullClassName, $autoGenManagerFullClassName);
		$pathToCustomManager = $basePath . str_replace(".", "/", $customManagerFullClassName) . ".hx";
		if(!file_exists($pathToCustomManager)) {
			php_io_File::putContent($pathToCustomManager, $customManager->toString());
		}
		$GLOBALS['%s']->pop();
	}
	static function getAutoGeneratedManager($table, $vars, $modelFullClassName, $fullClassName, $baseFullClassName) {
		$GLOBALS['%s']->push("OrmManagerGenerator::getAutoGeneratedManager");
		$製pos = $GLOBALS['%s']->length;
		$model = new OrmHaxeClassGenerator($fullClassName, $baseFullClassName);
		$model->addImport("php.db.ResultSet");
		$model->addImport("haquery.server.db.HaqDb");
		$model->addMethod("modelByParams", $vars, $modelFullClassName, "var _obj = new " . $modelFullClassName . "();\x0A" . Lambda::map($vars, array(new _hx_lambda(array(&$baseFullClassName, &$fullClassName, &$model, &$modelFullClassName, &$table, &$vars), "OrmManagerGenerator_0"), 'execute'))->join("\x0A") . "\x0A" . "return _obj;", true, null);
		$model->addMethod("modelByRow", new _hx_array(array(OrmTools::createVar("d", "Dynamic", null))), $modelFullClassName, "var _obj = new " . $modelFullClassName . "();\x0A" . Lambda::map($vars, array(new _hx_lambda(array(&$baseFullClassName, &$fullClassName, &$model, &$modelFullClassName, &$table, &$vars), "OrmManagerGenerator_1"), 'execute'))->join("\x0A") . "\x0A" . "return _obj;", true, null);
		$getVars = Lambda::filter($vars, array(new _hx_lambda(array(&$baseFullClassName, &$fullClassName, &$model, &$modelFullClassName, &$table, &$vars), "OrmManagerGenerator_2"), 'execute'));
		if($getVars->length > 0) {
			$model->addMethod("get", $getVars, $modelFullClassName, "return object('SELECT * FROM `" . $table . "` WHERE " . Lambda::map($getVars, array(new _hx_lambda(array(&$baseFullClassName, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars), "OrmManagerGenerator_3"), 'execute'))->join("+' AND ") . ");", null, null);
		}
		$createVars = Lambda::filter($vars, array(new _hx_lambda(array(&$baseFullClassName, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars), "OrmManagerGenerator_4"), 'execute'));
		$model->addMethod("create", $createVars, $modelFullClassName, "HaqDb.query('INSERT INTO `" . $table . "`(" . Lambda::map($createVars, array(new _hx_lambda(array(&$baseFullClassName, &$createVars, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars), "OrmManagerGenerator_5"), 'execute'))->join(", ") . ") VALUES (' + " . Lambda::map($createVars, array(new _hx_lambda(array(&$baseFullClassName, &$createVars, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars), "OrmManagerGenerator_6"), 'execute'))->join(" + ', ' + ") . " + ')');\x0A" . "if (HaqDb.affectedRows() < 1) return null;\x0A" . "return modelByParams(" . Lambda::map($vars, array(new _hx_lambda(array(&$baseFullClassName, &$createVars, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars), "OrmManagerGenerator_7"), 'execute'))->join(", ") . ");", null, null);
		$deleteVars = Lambda::filter($vars, array(new _hx_lambda(array(&$baseFullClassName, &$createVars, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars), "OrmManagerGenerator_8"), 'execute'));
		if($deleteVars->length === 0) {
			$deleteVars = $vars;
		}
		$model->addMethod("delete", $deleteVars, "Void", "HaqDb.query('DELETE FROM `" . $table . "` WHERE " . Lambda::map($deleteVars, array(new _hx_lambda(array(&$baseFullClassName, &$createVars, &$deleteVars, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars), "OrmManagerGenerator_9"), 'execute'))->join("+' AND ") . " + ' LIMIT 1');", null, null);
		$model->addMethod("all", new _hx_array(array(OrmTools::createVar("_order", "String", OrmManagerGenerator::getOrderDefVal($vars)))), "Array<" . $modelFullClassName . ">", "return objects('SELECT * FROM `" . $table . "`' + (_order != null ? ' ORDER BY ' + _order : ''));", null, null);
		$model->addMethod("object", new _hx_array(array(OrmTools::createVar("sql", "String", null))), $modelFullClassName, "var rows : ResultSet = HaqDb.query(sql + ' LIMIT 1');\x0A" . "if (rows.length == 0) return null;\x0A" . "return modelByRow(rows.next());", null, null);
		$model->addMethod("objects", new _hx_array(array(OrmTools::createVar("sql", "String", null))), "Array<" . $modelFullClassName . ">", "var rows : ResultSet = HaqDb.query(sql);\x0A" . "var list : Array<models.Users> = [];\x0A" . "for (row in rows)\x0A" . "{\x0A" . "\x09list.push(modelByRow(row));\x0A" . "}\x0A" . "return r;", null, null);
		{
			$_g = 0; $_g1 = haquery_server_db_HaqDb::$connection->getUniqueFields($table);
			while($_g < $_g1->length) {
				$uniqueField = $_g1[$_g];
				++$_g;
				$vs = Lambda::filter($vars, array(new _hx_lambda(array(&$_g, &$_g1, &$baseFullClassName, &$createVars, &$deleteVars, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$uniqueField, &$vars), "OrmManagerGenerator_10"), 'execute'));
				OrmManagerGenerator::createGetByMethod($table, $vars, $modelFullClassName, $vs, $model);
				unset($vs,$uniqueField);
			}
		}
		{
			$_g = 0; $_g1 = haquery_server_db_HaqDb::$connection->getForeignKeys($table);
			while($_g < $_g1->length) {
				$fk = $_g1[$_g];
				++$_g;
				$vs = Lambda::filter($vars, array(new _hx_lambda(array(&$_g, &$_g1, &$baseFullClassName, &$createVars, &$deleteVars, &$fk, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars), "OrmManagerGenerator_11"), 'execute'));
				OrmManagerGenerator::createGetsByMethod($table, $vars, $modelFullClassName, $vs, $model);
				unset($vs,$fk);
			}
		}
		{
			$GLOBALS['%s']->pop();
			return $model;
		}
		$GLOBALS['%s']->pop();
	}
	static function getCustomManager($table, $vars, $modelFullClassName, $fullClassName, $baseFullClassName) {
		$GLOBALS['%s']->push("OrmManagerGenerator::getCustomManager");
		$製pos = $GLOBALS['%s']->length;
		$model = new OrmHaxeClassGenerator($fullClassName, $baseFullClassName);
		$clas = OrmTools::splitFullClassName($fullClassName);
		$model->addImport("haquery.server.db.HaqDb");
		$model->addImport($modelFullClassName);
		{
			$GLOBALS['%s']->pop();
			return $model;
		}
		$GLOBALS['%s']->pop();
	}
	static function createGetByMethod($table, $vars, $modelFullClassName, $whereVars, $model) {
		$GLOBALS['%s']->push("OrmManagerGenerator::createGetByMethod");
		$製pos = $GLOBALS['%s']->length;
		$model->addMethod("getBy" . Lambda::map($whereVars, array(new _hx_lambda(array(&$model, &$modelFullClassName, &$table, &$vars, &$whereVars), "OrmManagerGenerator_12"), 'execute'))->join("And"), $whereVars, $modelFullClassName, "return object('SELECT * FROM `" . $table . "` WHERE " . Lambda::map($whereVars, array(new _hx_lambda(array(&$model, &$modelFullClassName, &$table, &$vars, &$whereVars), "OrmManagerGenerator_13"), 'execute'))->join("+' AND ") . ");", null, null);
		$GLOBALS['%s']->pop();
	}
	static function createGetsByMethod($table, $vars, $modelFullClassName, $whereVars, $model) {
		$GLOBALS['%s']->push("OrmManagerGenerator::createGetsByMethod");
		$製pos = $GLOBALS['%s']->length;
		$model->addMethod("getBy" . Lambda::map($whereVars, array(new _hx_lambda(array(&$model, &$modelFullClassName, &$table, &$vars, &$whereVars), "OrmManagerGenerator_14"), 'execute'))->join("And"), Lambda::concat($whereVars, new _hx_array(array(OrmTools::createVar("_order", "String", OrmManagerGenerator::getOrderDefVal($vars))))), "Array<" . $modelFullClassName . ">", "return objects('SELECT * FROM `" . $table . "` WHERE " . Lambda::map($whereVars, array(new _hx_lambda(array(&$model, &$modelFullClassName, &$table, &$vars, &$whereVars), "OrmManagerGenerator_15"), 'execute'))->join("+' AND ") . " + (_order != null ? ' ORDER BY ' + _order : ''));", null, null);
		$GLOBALS['%s']->pop();
	}
	static function getOrderDefVal($vars) {
		$GLOBALS['%s']->push("OrmManagerGenerator::getOrderDefVal");
		$製pos = $GLOBALS['%s']->length;
		$positionVar = Lambda::filter($vars, array(new _hx_lambda(array(&$vars), "OrmManagerGenerator_16"), 'execute'));
		{
			$裨mp = OrmManagerGenerator_17($positionVar, $vars);
			$GLOBALS['%s']->pop();
			return $裨mp;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'OrmManagerGenerator'; }
}
function OrmManagerGenerator_0(&$baseFullClassName, &$fullClassName, &$model, &$modelFullClassName, &$table, &$vars, $v) {
	{
		$GLOBALS['%s']->push("OrmManagerGenerator::getAutoGeneratedManager@42");
		$製pos2 = $GLOBALS['%s']->length;
		{
			$裨mp = "_obj." . $v->haxeName . " = " . $v->haxeName . ";";
			$GLOBALS['%s']->pop();
			return $裨mp;
		}
		$GLOBALS['%s']->pop();
	}
}
function OrmManagerGenerator_1(&$baseFullClassName, &$fullClassName, &$model, &$modelFullClassName, &$table, &$vars, $v) {
	{
		$GLOBALS['%s']->push("OrmManagerGenerator::getAutoGeneratedManager@49");
		$製pos2 = $GLOBALS['%s']->length;
		{
			$裨mp = "_obj." . $v->haxeName . " = Reflect.field(d, '" . $v->haxeName . "');";
			$GLOBALS['%s']->pop();
			return $裨mp;
		}
		$GLOBALS['%s']->pop();
	}
}
function OrmManagerGenerator_2(&$baseFullClassName, &$fullClassName, &$model, &$modelFullClassName, &$table, &$vars, $v) {
	{
		$GLOBALS['%s']->push("OrmManagerGenerator::getAutoGeneratedManager@54");
		$製pos2 = $GLOBALS['%s']->length;
		{
			$裨mp = $v->isKey;
			$GLOBALS['%s']->pop();
			return $裨mp;
		}
		$GLOBALS['%s']->pop();
	}
}
function OrmManagerGenerator_3(&$baseFullClassName, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars, $v) {
	{
		$GLOBALS['%s']->push("OrmManagerGenerator::getAutoGeneratedManager@59");
		$製pos2 = $GLOBALS['%s']->length;
		{
			$裨mp = "`" . $v->name . "` = ' + HaqDb.quote(" . $v->haxeName . ")";
			$GLOBALS['%s']->pop();
			return $裨mp;
		}
		$GLOBALS['%s']->pop();
	}
}
function OrmManagerGenerator_4(&$baseFullClassName, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars, $v) {
	{
		$GLOBALS['%s']->push("OrmManagerGenerator::getAutoGeneratedManager@64");
		$製pos2 = $GLOBALS['%s']->length;
		{
			$裨mp = !$v->isAutoInc;
			$GLOBALS['%s']->pop();
			return $裨mp;
		}
		$GLOBALS['%s']->pop();
	}
}
function OrmManagerGenerator_5(&$baseFullClassName, &$createVars, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars, $v) {
	{
		$GLOBALS['%s']->push("OrmManagerGenerator::getAutoGeneratedManager@67");
		$製pos2 = $GLOBALS['%s']->length;
		{
			$裨mp = "`" . $v->name . "`";
			$GLOBALS['%s']->pop();
			return $裨mp;
		}
		$GLOBALS['%s']->pop();
	}
}
function OrmManagerGenerator_6(&$baseFullClassName, &$createVars, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars, $v) {
	{
		$GLOBALS['%s']->push("OrmManagerGenerator::getAutoGeneratedManager@69");
		$製pos2 = $GLOBALS['%s']->length;
		{
			$裨mp = "HaqDb.quote(" . $v->haxeName . ")";
			$GLOBALS['%s']->pop();
			return $裨mp;
		}
		$GLOBALS['%s']->pop();
	}
}
function OrmManagerGenerator_7(&$baseFullClassName, &$createVars, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars, $v) {
	{
		$GLOBALS['%s']->push("OrmManagerGenerator::getAutoGeneratedManager@72");
		$製pos2 = $GLOBALS['%s']->length;
		{
			$裨mp = OrmManagerGenerator_18($baseFullClassName, $createVars, $fullClassName, $getVars, $model, $modelFullClassName, $table, $v, $vars);
			$GLOBALS['%s']->pop();
			return $裨mp;
		}
		$GLOBALS['%s']->pop();
	}
}
function OrmManagerGenerator_8(&$baseFullClassName, &$createVars, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars, $v) {
	{
		$GLOBALS['%s']->push("OrmManagerGenerator::getAutoGeneratedManager@75");
		$製pos2 = $GLOBALS['%s']->length;
		{
			$裨mp = $v->isKey;
			$GLOBALS['%s']->pop();
			return $裨mp;
		}
		$GLOBALS['%s']->pop();
	}
}
function OrmManagerGenerator_9(&$baseFullClassName, &$createVars, &$deleteVars, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars, $v) {
	{
		$GLOBALS['%s']->push("OrmManagerGenerator::getAutoGeneratedManager@79");
		$製pos2 = $GLOBALS['%s']->length;
		{
			$裨mp = "`" . $v->name . "` = ' + HaqDb.quote(" . $v->haxeName . ")";
			$GLOBALS['%s']->pop();
			return $裨mp;
		}
		$GLOBALS['%s']->pop();
	}
}
function OrmManagerGenerator_10(&$_g, &$_g1, &$baseFullClassName, &$createVars, &$deleteVars, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$uniqueField, &$vars, $v) {
	{
		$GLOBALS['%s']->push("OrmManagerGenerator::getAutoGeneratedManager@105");
		$製pos2 = $GLOBALS['%s']->length;
		{
			$裨mp = $v->name === $uniqueField;
			$GLOBALS['%s']->pop();
			return $裨mp;
		}
		$GLOBALS['%s']->pop();
	}
}
function OrmManagerGenerator_11(&$_g, &$_g1, &$baseFullClassName, &$createVars, &$deleteVars, &$fk, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$vars, $v) {
	{
		$GLOBALS['%s']->push("OrmManagerGenerator::getAutoGeneratedManager@111");
		$製pos2 = $GLOBALS['%s']->length;
		{
			$裨mp = $v->name === $fk->key;
			$GLOBALS['%s']->pop();
			return $裨mp;
		}
		$GLOBALS['%s']->pop();
	}
}
function OrmManagerGenerator_12(&$model, &$modelFullClassName, &$table, &$vars, &$whereVars, $v) {
	{
		$GLOBALS['%s']->push("OrmManagerGenerator::createGetByMethod@132");
		$製pos2 = $GLOBALS['%s']->length;
		{
			$裨mp = OrmTools::capitalize($v->haxeName);
			$GLOBALS['%s']->pop();
			return $裨mp;
		}
		$GLOBALS['%s']->pop();
	}
}
function OrmManagerGenerator_13(&$model, &$modelFullClassName, &$table, &$vars, &$whereVars, $v) {
	{
		$GLOBALS['%s']->push("OrmManagerGenerator::createGetByMethod@137");
		$製pos2 = $GLOBALS['%s']->length;
		{
			$裨mp = "`" . $v->name . "` = ' + HaqDb.quote(" . $v->haxeName . ")";
			$GLOBALS['%s']->pop();
			return $裨mp;
		}
		$GLOBALS['%s']->pop();
	}
}
function OrmManagerGenerator_14(&$model, &$modelFullClassName, &$table, &$vars, &$whereVars, $v) {
	{
		$GLOBALS['%s']->push("OrmManagerGenerator::createGetsByMethod@145");
		$製pos2 = $GLOBALS['%s']->length;
		{
			$裨mp = OrmTools::capitalize($v->haxeName);
			$GLOBALS['%s']->pop();
			return $裨mp;
		}
		$GLOBALS['%s']->pop();
	}
}
function OrmManagerGenerator_15(&$model, &$modelFullClassName, &$table, &$vars, &$whereVars, $v) {
	{
		$GLOBALS['%s']->push("OrmManagerGenerator::createGetsByMethod@150");
		$製pos2 = $GLOBALS['%s']->length;
		{
			$裨mp = "`" . $v->name . "` = ' + HaqDb.quote(" . $v->haxeName . ")";
			$GLOBALS['%s']->pop();
			return $裨mp;
		}
		$GLOBALS['%s']->pop();
	}
}
function OrmManagerGenerator_16(&$vars, $v) {
	{
		$GLOBALS['%s']->push("OrmManagerGenerator::getOrderDefVal@157");
		$製pos2 = $GLOBALS['%s']->length;
		{
			$裨mp = $v->name === "position";
			$GLOBALS['%s']->pop();
			return $裨mp;
		}
		$GLOBALS['%s']->pop();
	}
}
function OrmManagerGenerator_17(&$positionVar, &$vars) {
	if($positionVar->isEmpty()) {
		return "null";
	} else {
		return $positionVar->first()->haxeName;
	}
}
function OrmManagerGenerator_18(&$baseFullClassName, &$createVars, &$fullClassName, &$getVars, &$model, &$modelFullClassName, &$table, &$v, &$vars) {
	if($v->isAutoInc) {
		return "HaqDb.lastInsertId()";
	} else {
		return $v->haxeName;
	}
}
