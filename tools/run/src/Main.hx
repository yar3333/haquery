package ;

import hant.CmdOptions;
import hant.FlashDevelopProject;
import hant.PathTools;
import hant.FileSystemTools;
import hant.Process;
import stdlib.Exception;
import neko.Lib;
import neko.Sys;
import hant.Log;
import haquery.server.HaqConfig;
import haquery.common.HaqTemplateExceptions;
using StringTools;

class Main 
{
	static function main()
	{
		var exeDir = PathTools.path2normal(Sys.getCwd());
        
		var args = Sys.args();
		if (args.length > 0)
		{
			Sys.setCwd(args.pop());
		}
		else
		{
			fail("run this program via haxelib utility.");
		}
		
		var k64Index = Lambda.indexOf(args, "-64");
		if (k64Index >= 0) args.remove("-64");
		
		var log = new Log(2);
		var fs = new FileSystemTools(log, exeDir + "/hant-" + Sys.systemName().toLowerCase() + (k64Index >=0 ? "64" : ""));
		
        if (args.length > 0)
		{
			var command = args.shift();
			
			try
			{
				switch (command)
				{
					case 'gen-orm': 
						var project = new FlashDevelopProject("");
						
						var databaseConnectionString = args.length > 0 ? args[0] : HaqConfig.load(project.srcPath + "config.xml").customs.get("databaseConnectionString");
						if (databaseConnectionString != null && databaseConnectionString != "")
						{
							Process.run(log, "haxelib", 
								[ 
									  "run", "orm"
									, databaseConnectionString
									, "-a", "models.server.autogenerated"
									, "-c", "models.server" 
								]
								, true
							);
						}
						else
						{
							fail(
								  "databaseConnectionString not found.\n"
								+ "You may specify it in the 'src/config.xml' file:\n"
								+ "\t<config>\n"
								+ "\t\t<custom name=\"databaseConnectionString\" value=\"mysql://USER:PASSWORD@HOST/DATABASE\" />\n"
								+ "\t</config>\n"
								+ "or in the command line:\n"
								+ "\thaxelib run HaQuery gen-orm mysql://USER:PASSWORD@HOST/DATABASE"
							);
						}
					
					case 'build': 
						var options = new CmdOptions();
						options.add("output", "bin", [ "--output" ]);
						options.add("jsModern", false, [ "--js-modern" ]);
						options.add("deadCodeElimination", false, [ "--dead-code-elimination" ]);
						options.add("basePage", "", [ "--base-page" ]);
						options.add("staticUrlPrefix", "", [ "--static-url-prefix" ]);
						options.add("noServer", false, [ "--no-server" ]);
						options.add("noClient", false, [ "--no-client" ]);
						options.add("project", "");
						options.parse(args);
						new Build(log, fs, exeDir, k64Index>=0, options.get("project")).build(
							  options.get("output")
							, options.get("jsModern")
							, options.get("deadCodeElimination")
							, options.get("basePage")
							, options.get("staticUrlPrefix")
							, options.get("noServer")
							, options.get("noClient")
						);
					
					case 'install':
						new Setup(log, fs, exeDir).install();
					
					default:
						fail("command '" + command + "' is not supported.");
				}
			}
			catch (e:HaqTemplateNotFoundException)
			{
				log.trace("ERROR: component not found [ " + e.toString() + " ].");
				fail();
			}
			catch (e:HaqTemplateRecursiveExtendsException)
			{
				log.trace("ERROR: recursive extend detected [ " + e.toString() + " ].");
				fail();
			}
			catch (e:Exception)
			{
				log.trace(e.message);
				fail();
			}
        }
		else
		{
			Lib.println("HaQuery building support and deploying tool.");
			Lib.println("Usage: haxelib run HaQuery <command>");
			Lib.println("");
			Lib.println("    where <command> may be:");
			Lib.println("");
			Lib.println("        install                        Install FlashDevelop templates.");
			Lib.println("");
			Lib.println("        build                          Do project building.");
			Lib.println("            [--output=<dir>]           Output folder (by default is 'bin').");
			Lib.println("            [--js-modern]              Generate js code in modern style.");
			Lib.println("            [--dead-code-elimination]  For a while is not supported.");
			Lib.println("            [--base-page=<package>]    Default base page. For example: 'pages.layout'.");
			Lib.println("            [--static-url-prefix=<p>]  Prefix for URLs started with '~',");
			Lib.println("                                       links to system the system files");
			Lib.println("                                       and registered js/css files.");
			Lib.println("                                       Affected to HTML and CSS output only,");
			Lib.println("                                       not to physical folders structure.");
			Lib.println("            [--no-server]              Skip server compilation.");
			Lib.println("            [--no-client]              Skip client compilation.");
			Lib.println("                                       Definition 'mobile' will be defined too.");
			Lib.println("            [<projectfile>]            FlashDevelop project file to read.");
			Lib.println("                                       (Default: find *.hxproj in the current directory.)");
			Lib.println("            [-64]                      Use 64-bit ndll files.");
			Lib.println("");
			Lib.println("        gen-orm                        Generate object-related classes.");
			Lib.println("            [databaseConnectionString] Like 'mysql://user:pass@host/dbname'.");
		}
        
        Sys.exit(0);
	}
	
	static function fail(?message:String)
	{
		if (message != null)
		{
			Lib.println("ERROR: " + message);
		}
		Sys.exit(1);
	}
}