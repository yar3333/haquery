package haquery.tools.trm;

import haquery.server.FileSystem;
import haquery.server.HaqDefines;
import haquery.server.HaqXml;
import haquery.server.io.File;
import haquery.server.Lib;

import haquery.tools.HaqTemplate;
import haquery.tools.HaqTemplateParser;
import haquery.tools.HaqTemplateManager;
import haquery.tools.HaxeClass;

using haquery.StringTools;
using haquery.HashTools;

class TrmGenerator
{
	var manager : HaqTemplateManager;
	
	var isFirstPrint : Bool; 
	
	public static function run(manager:HaqTemplateManager)
	{
		new TrmGenerator(manager);
	}
	
	function new(manager:HaqTemplateManager)
    {
		this.manager = manager;
		
		isFirstPrint = true;
		
		for (fullTag in manager.getLastMods().keys())
		{
			generate(fullTag);
		}
    }
	
	function generate(fullTag:String)
	{
		var template = manager.get(fullTag);
		
		if (template.hasLocalServerClass || template.hasLocalClientClass)
		{
			var serverVars = getTemplateVars(fullTag, template.doc, "haquery.server.HaqQuery", true);
			if (serverVars.length > 0 && template.hasLocalServerClass)
			{
				//print(fullTag + ".TemplateServer");
				generateTrmClass(serverVars, fullTag + ".TemplateServer", template.trmServerFilePath, "haquery.server.HaqComponent");
			}
			else
			{
				deleteFile(template.trmServerFilePath);
			}
				
			var clientVars = getTemplateVars(fullTag, template.doc, "haquery.client.HaqQuery", false);
			if (clientVars.length > 0 && template.hasLocalClientClass)
			{
				//print(fullTag + ".TemplateClient");
				generateTrmClass(clientVars, fullTag + ".TemplateClient", template.trmClientFilePath, "haquery.client.HaqComponent");
			}
			else
			{
				deleteFile(template.trmClientFilePath);
			}
		}
	}
	
	function generateTrmClass(vars:Array<HaxeVarGetter>, className:String, classFilePath:String, stdComponentClassName:String)
	{
		var haxeClass = new HaxeClass(className);
		haxeClass.addVar(createVar("component", stdComponentClassName), true);
		
		for (v in vars)
		{
			haxeClass.addVarGetter(v, false, false, true);
		}
		
		haxeClass.addMethod(
			 "new"
			,[ createVar("component", stdComponentClassName) ]
			,"Void"
			,"this.component = component;"
		);
		
		File.putContent(
			 classFilePath
			,"// This is autogenerated file. Do not edit!\n\n" + haxeClass.toString() + "\n"
		);
	}
	
	function getTemplateVars(fullTag:String, node:HaqXmlNodeElement, queryClassName:String, isServer:Bool) : Array<HaxeVarGetter>
	{
		var r : Array<HaxeVarGetter> = [];
		var children = node.children;
		for (child in children)
		{
			if (child.hasAttribute("id") && child.getAttribute("id").trim() != "")
			{
				var componentID = child.getAttribute("id").trim();
				
				var type = queryClassName;
				var body = "return component.q('#" + componentID + "');";
				if (child.name.startsWith("haq:"))
				{
					var template = manager.findTemplate(fullTag, child.name.substr("haq:".length));
					type = isServer ? template.serverClassName : template.clientClassName;
					body = "return cast component.components.get('" + componentID + "');";
				}
				
				r.push({ haxeName:componentID, haxeType:type, haxeBody:body });
			}
			
			if (child.name != "haq:list")
			{
				r = r.concat(getTemplateVars(fullTag, child, queryClassName, isServer));
			}
		}
		return r;
	}
	
	function createVar(name:String, type:String, defVal:String = null) : HaxeVar
	{
		return {
			 haxeName : name
			,haxeType : type
			,haxeDefVal : defVal
		};
	}	
	
	function print(s:String)
	{
		if (isFirstPrint)
		{
			Lib.print("\n    ");
			isFirstPrint = false;
		}
		Lib.print(s + "\n    ");
	}
	
	function deleteFile(path:String)
	{
		if (FileSystem.exists(path))
		{
			FileSystem.deleteFile(path);
		}
	}
}
