package ;

import haquery.server.HaqConfig;
import haquery.server.HaqTemplates;
import haquery.server.HaqXml;
import php.FileSystem;
import php.io.File;
import php.Lib;
import TrmHaxeClass;

using haquery.StringTools;

class TrmGenerator
{
	static public function makeForComponents(componentsPackage:String)
    {
		for (classPath in TrmTools.getClassPaths())
		{
			var basePath = classPath.replace("\\", "/").rtrim("/") + "/";
			var path = basePath + componentsPackage.replace(".", "/");
			if (FileSystem.isDirectory(path))
			{
				makeForComponentsFolder(componentsPackage);
			}
		}
    }
	
	static function makeForComponentsFolder(componentsPackage:String)
	{
		trace("TrmGenerator.makeForComponentsFolder('" + componentsPackage + "')");
		
		var path = findFile(componentsPackage.replace(".", "/"));
		trace("readDirectory " + path);
		for (componentName in FileSystem.readDirectory(path))
		{
			if (FileSystem.isDirectory(path + "/" + componentName))
			{
				makeForComponent(componentsPackage, componentName);
			}
		}
	}
	
	static function makeForComponent(componentsPackage:String, componentName:String)
	{
		trace("TrmGenerator.makeForComponent('" + componentsPackage + "', '" + componentName + "')");
		
		var componentData = getComponentData(componentsPackage, componentName);
		//trace("\ncomponentData.templateText = \n" + componentData.templateText + "\n");
		
		var haxeClass = new TrmHaxeClass(componentsPackage + "." + componentName + ".Template", componentData.superClass);
		
		haxeClass.addVar(TrmTools.createVar("component", "#if php haquery.server.HaqComponent #else haquery.client.HaqComponent #end"), true);
		
		var doc = new HaqXml(componentData.templateText);
		for (templateVar in getTemplateVars(componentsPackage, doc))
		{
			haxeClass.addVarGetter(templateVar, false, false, true);
		}
		
		haxeClass.addMethod(
			 "new"
			,[ TrmTools.createVar("component", "#if php haquery.server.HaqComponent #else haquery.client.HaqComponent #end") ]
			,"Void"
			,"this.component = component;"
		);
		
		File.putContent(
			 findFile(componentsPackage.replace(".", "/") + "/" + componentName) + "/Template.hx"
			,"// This is autogenerated file. Do not edit!\n\n" + haxeClass.toString()
		);
	}
	
	static function findFile(relativePath:String) : String
	{
		var classPaths = TrmTools.getClassPaths();
		var i = classPaths.length - 1;
		while (i >= 0)
		{
			//trace("findFile check: " + classPaths[i] + relativePath);
			if (FileSystem.exists(classPaths[i] + relativePath))
			{
				return classPaths[i] + relativePath;
			}
			i--;
		}
		return null;
	}
	
	static function getComponentData(componentsPackage:String, componentName:String) : { templateText:String, superClass:String }
	{
		trace("\ngetComponentData('" + componentsPackage + "', '" + componentName + "')");
		
		var templateSuperClassPath = findFile(componentsPackage.replace(".", "/") + componentName + "/Template.hx");
		if (templateSuperClassPath != null)
		{
			return { templateText : "", superClass : componentsPackage + "." + componentName };
		}
		
		var templatePath = findFile(componentsPackage.replace(".", "/") + "/" + componentName + "/template.html");
		trace("templatePath = " + templatePath);
		var templateText = templatePath != null ? File.getContent(templatePath) : "";
		
		var config = HaqConfig.getComponentsConfig(TrmTools.getClassPaths(), componentsPackage);
		if (config.extendsPackage != null && config.extendsPackage != "")
		{
			var superTemplateData = getComponentData(config.extendsPackage, componentName);
			return { templateText : superTemplateData.templateText + templateText, superClass : superTemplateData.superClass };
		}
		
		return { templateText : templateText, superClass : null };
	}
	
	static function getTemplateVars(componentsPackage:String, node:HaqXmlNodeElement) : Array<TrmHaxeVarGetter>
	{
		var r : Array<TrmHaxeVarGetter> = [];
		var children : Array<HaqXmlNodeElement> = cast Lib.toHaxeArray(node.children);
		for (child in children)
		{
			if (child.hasAttribute("id") && child.getAttribute("id").trim() != "")
			{
				var componentID = child.getAttribute("id").trim();
				
				var type = "#if php haquery.server.HaqQuery #else haquery.client.HaqQuery #end";
				var body = "return q('#" + componentID + "');";
				if (child.name.startsWith("haq:"))
				{
					var componentName = child.name.substr("haq:".length);
					
					var serverClass = getComponentClass(componentsPackage, componentName, "Server");
					if (serverClass == null) serverClass = "haquery.Server.HaqComponent";
					
					var clientClass = getComponentClass(componentsPackage, componentName, "Client");
					if (clientClass == null) clientClass = "haquery.Client.HaqComponent";
					
					type = "#if php " + serverClass + " #else " + clientClass + " #end";
					body = "return cast component.components.get('" + componentID + "');";
				}
				
				r.push({ name:componentID, type:type, body:body });
			}
			
			r = r.concat(getTemplateVars(componentsPackage, child));
		}
		return r;
	}
	
	static function getComponentClass(componentsPackage:String, componentName:String, className:String) : String
	{
		var haxeClass =  componentsPackage + "." + componentName + "." + className;
		//trace("class to check: " + haxeClass.replace(".", "/") + ".hx");
		if (findFile(haxeClass.replace(".", "/") + ".hx") != null)
		{
			//trace("finded!");
			return haxeClass;
		}
		
		var config = HaqConfig.getComponentsConfig(TrmTools.getClassPaths(), componentsPackage);
		if (config.extendsPackage != null && config.extendsPackage != "")
		{
			return getComponentClass(config.extendsPackage, componentName, className);
		}
		
		return null;
	}
}
